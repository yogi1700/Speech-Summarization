First Create a grammar(gram) file :- which  contains a expected words or notes as a input.

Create wdnet from the gram using command:

	HParse gram wdnet  

1. Create a new pronunciation dictionnary for you Grammar and additional words required to create a phonetically balanced Acoustic Model. 

*Create lexicon contain the word names and their corresponding phonemes

Execute the HDMan command

	HDMan -A -D -T 1 -m -w wlist -n monophones1 -i -l dlog dict lexicon

* Dict :-  The pronunciation dictionnary for you Grammar and additional words required to create a phonetically balanced Acoustic Model.
* Monophones1 :- which is simply a list of the phones used in dict.

2. Creating Monophones0 File
* Copy the "monophones1" file to a new "monophones0" file in your directory and then remove the short-pause "sp" entry in monophones0.

3. Creating the Transcription Files
*HTK toolkit cannot process prompts file directly.  Two ways to create label file, a separate 'label' file for each line prompts file.
Or create a Master Label File (MLF) - which is a single file that contains a label entry for each line in your prompts file - this is the easiest approach, and the one is used for this tutorial.

	perl prompts2mlf words.mlf prompts

4. Phone Level Transcriptions
* Next is to execute the HLEd command to expand the Word Level Transcriptions to Phone Level Transcriptions - i.e. replace each word with its phonemes, and put the result in a new Phone Level Master Label File.

First, create  the mkphones0.led edit script in folder:

	EX
	IS sil sil
	DE sp

	note: remember to include a blank line at the end of this script

Then execute the following HLEd command from same folder:

	HLEd -A -D -T 1 -l '*' -d dict -i phones0.mlf mkphones0.led words.mlf 

* Next, create a second phones1.mlf file (which will include short pauses (“sp”) after each word phone group).  First create the mkphones1.led in folder as follows:

	EX
	IS sil sil

* Then run the HLEd command again from folder as follows:

	HLEd -A -D -T 1 -l '*' -d dict -i phones1.mlf mkphones1.led words.mlf 

5. Create Codetrain.scp
* HTK calls this last step in data preparation the "parameterizing the raw speech waveforms into sequences of feature vectors".
The HCopy tool convert .wav files to MFCC format.

* Codetrain.scp contains: path to .wav tarining file and path whwre corrosponding features should be stored. 

* Config File : Configuration file (config) which specifies all the needed conversion parameters is required.
e.g.
SOURCEFORMAT = WAV
TARGETKIND = MFCC_0_D
TARGETRATE = 100000.0
SAVECOMPRESSED = T
SAVEWITHCRC = T
WINDOWSIZE = 250000.0
USEHAMMING = T
PREEMCOEF = 0.97
NUMCHANS = 26
CEPLIFTER = 22
NUMCEPS = 12

For more details on the contents of the config file, please see the HTK documentation. 

*Run following command.
	HCopy -A -D -T 1 -C wav_config -S codetrain.scp

6. Creating Flat Start Monophones 
* Define Prototype Model
	The first step in Hidden Markov Model ("HMM") training is defining a prototype model called "proto".   The focus here is to create a model structure, the parameters are not important.
	Create a file called 'proto' in your directory and add the following:

~o <VecSize> 25 <MFCC_0_D_N_Z>
~h "proto"
<BeginHMM>
  <NumStates> 5
  <State> 2
    <Mean> 25
      0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
    <Variance> 25
      1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0
 <State> 3
    <Mean> 25
      0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
    <Variance> 25
      1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0
 <State> 4
    <Mean> 25
      0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
    <Variance> 25
      1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0
 <TransP> 5
  0.0 1.0 0.0 0.0 0.0
  0.0 0.6 0.4 0.0 0.0
  0.0 0.0 0.6 0.4 0.0
  0.0 0.0 0.0 0.7 0.3
  0.0 0.0 0.0 0.0 0.0
<EndHMM>

* Configuration file.  Create a file called 'config' in your directory and add the following data:

TARGETKIND = MFCC_0_D_N_Z
TARGETRATE = 100000.0
SAVECOMPRESSED = T
SAVEWITHCRC = T
WINDOWSIZE = 250000.0
USEHAMMING = T
PREEMCOEF = 0.97
NUMCHANS = 26
CEPLIFTER = 22
NUMCEPS = 12

Note: The target kind in proto file (the "MFCC_0_D_N_Z" on the first line), needs to match the TARGETKIND in config file.

Also need to tell HTK where all feature vector files are located (those are the mfcc files you created in the last step). Therefore, create a file called "train.scp". It look like this

../train/mfcc/sample1.mfc
../train/mfcc/sample2.mfc
../train/mfcc/sample3.mfc
../train/mfcc/sample4.mfc
../train/mfcc/sample5.mfc
../train/mfcc/sample6.mfc
../train/mfcc/sample7.mfc
../train/mfcc/sample8.mfc

The next step is to create a new folder call hmm0.  Then create a new version of proto in the hmm0 folder - using the HTK  HCompV tool as follows:

	HCompV -A -D -T 1 -C config -f 0.01 -m -S train.scp -M hmm0 proto

This creates two files in the hmm0 folder:
    proto
    vFloors 	

Flat Start Monophones

* Create hmmdefs
   1. Create a new file called hmmdefs in your folder:
        * Copy the monophones0 file to your hmm0 folder;
        * rename the monophones0 file to hmmdefs;
   2. For each phone in hmmdefs:
        * put the phone in double quotes;
        * add '~h ' before the phone (note the space after the '~h'); and
        * copy from line 5 onwards (i.e. starting from "<BEGINHMM>" to "<ENDHMM>") of the hmm0/proto file and paste it after each phone.

    Leave one blank line at the end of your file. 

This create the hmmdefs file, which contains "flat start" monophones.

* Create macros File 
The final step in this section is to create the macros file.

A new file called macros should be created and stored in your 'voxforge/manual/hmm0' folder:

    1. create a new file called macros in hmm0;
    2. copy the first 3 lines of proto (from ~o to <DIAGC>) and add them to the top of the macros file
    3. copy vFloors to macros

It should look something like this when finished: 

~o
<STREAMINFO> 1 25
<VECSIZE> 25<NULLD><MFCC_D_N_Z_0><DIAGC>
~v varFloor1
<Variance> 25
 6.580433e-01 3.732679e-01 3.525512e-01 4.770427e-01 4.332326e-01 4.544643e-01 5.620688e-01 2.553866e-01 4.001570e-01 3.416672e-01 2.128212e-01 2.660224e-01 1.668585e-02 1.700366e-02 1.616409e-02 1.768895e-02 1.718035e-02 2.098122e-02 2.326025e-02 1.677738e-02 2.010740e-02 1.595870e-02 1.417547e-02 1.510511e-02 1.447709e-02

* Re-estimate Monophones
Next, create 9 new folders named consecutively in folder: hmm1 to hmm9.

The Flat Start Monophones are re-estimated using the HERest tool.  The purpose of this is to load all the models in the hmm0 folder (these are contained in the hmmdefs file), and re-estimate them using the MFCC files listed in the train.scp script, and create a new model set in hmm1.   Execute the HERest command from directory:

	HERest -A -D -T 1 -C config -I phones0.mlf -t 250.0 150.0 1000.0 -S train.scp -H hmm0/macros -H hmm0/hmmdefs -M hmm1 monophones0

	If smaller numbser of states are there and error comes "row sum exceeds 1.0" then add -p option with some value to command.

	HERest -p 4 -A -D -T 1 -C config -I phones0.mlf -t 250.0 150.0 1000.0 -S train.scp -H hmm0/macros -H hmm0/hmmdefs -M hmm1 monophones0

The files created by this command are:
    hmm1/hmmdefs
    hmm1/macros

This process is repeated 2 more times, creating new model sets in hmm2 and hmm3, respectively:

	HERest -A -D -T 1 -C config -I phones0.mlf -t 250.0 150.0 1000.0 -S train.scp -H hmm1/macros -H hmm1/hmmdefs -M hmm2 monophones0

	HERest -A -D -T 1 -C config -I phones0.mlf -t 250.0 150.0 1000.0 -S train.scp -H hmm2/macros -H hmm2/hmmdefs -M hmm3 monophones0

7. Fixing the Silence Models
In the last step HMM models created did not include an "sp" (short pause) silence model - which refers to the types of short pauses that occur between words in normal speech.  However, created model is a "sil" silence model - sil silence models are typically of longer duration, and refer to the pauses occur at the end of a sentence.   

To add silence model
Tutorial :
First copy the contents of the hmm3 folder to hmm4. Then using an editor, create new "sp" model in hmm4/hmmdefs as follows:

    copy and paste the “sil” model and rename the new one “sp”(don't delete your old "sil" model, you will need it - just make a copy of it)
    remove state 2 and 4 from new “sp” model (i.e. keep 'centre state' of old “sil” model in new “sp” model)
    change <NUMSTATES> to 3
    change <STATE> to 2
    change <TRANSP> to 3
    change matrix in <TRANSP> to 3 by 3 array
    change numbers in matrix as follows:
	0.0 1.0 0.0
	0.0 0.9 0.1
	0.0 0.0 0.0

sp model should look something like this:

~h "sp"
<BEGINHMM>
<NUMSTATES> 3
<STATE> 2
<MEAN> 25
 -7.046570e+00 -3.262981e-01 -1.706483e+00 -1.080971e+00 -1.134529e+00 3.588506e+00 3.917166e+00 1.443405e+00 4.899211e+00 3.409961e+00 8.219168e-01 3.644213e+00 -7.641904e-02 -6.077167e-02 2.118241e-01 -8.631640e-02 3.686112e-02 8.506200e-02 -8.106526e-02 1.066912e-02 1.281262e-01 -1.437282e-01 -3.412217e-02 1.333326e-01 1.202221e-01
<VARIANCE> 25
 7.911258e+00 8.348815e+00 1.148870e+01 1.213321e+01 8.655976e+00 1.509970e+01 9.904381e+00 1.166922e+01 1.025182e+01 8.845907e+00 8.135198e+00 9.622693e+00 9.084668e-01 7.631339e-01 1.614822e+00 9.755048e-01 7.167343e-01 1.691362e+00 1.297928e+00 9.801642e-01 1.225108e+00 1.051384e+00 9.349809e-01 1.529028e+00 5.576642e-01
<GCONST> 7.411308e+01
<TRANSP> 3
 0.0 1.0 0.0
 0.0 0.9 0.1
 0.0 0.0 0.0
<ENDHMM>

* Next, run the HMM editor called HHEd to "tie" the sp state to the sil centre state - tying means that one or more HMMs share the same set of parameters. To do this, create the following HHEd command script, called sil.hed, in folder:

AT 2 4 0.2 {sil.transP}
AT 4 2 0.2 {sil.transP}
AT 1 3 0.3 {sp.transP}
TI silst {sil.state[3],sp.state[2]}

The last line is the "tie" command.  Next run HHEd as follows, but using the monophones1 file which contains the sp model:

	HHEd -A -D -T 1 -H hmm4/macros -H hmm4/hmmdefs -M hmm5 sil.hed monophones1

Next run HERest 2 more times, this time using the monophones1 file:

	HERest -A -D -T 1 -C config  -I phones0.mlf -t 250.0 150.0 3000.0 -S train.scp -H hmm5/macros -H  hmm5/hmmdefs -M hmm6 monophones1

	HERest -A -D -T 1 -C config  -I phones0.mlf -t 250.0 150.0 3000.0 -S train.scp -H hmm6/macros -H hmm6/hmmdefs -M hmm7 monophones1

8. Realigning the Training Data

Background 

This operation is similar to the HLEd word-to-phone mapping operation performed in the Step 4, however in this case the HVite command can consider all pronunciations for each word (in the case where a word has more than one pronunciations), and then output the pronunciation that best matches the acoustic data.

Steps
Execute the HVite command as follows:

	HVite -A -D -T 1 -l '*' -o SWT -b SENT-END -C config -H hmm7/macros -H hmm7/hmmdefs -i aligned.mlf -m -t 250.0 150.0 1000.0 -y lab -a -I words.mlf -S train.scp dict monophones1> HVite_log

This creates the aligned.mlf file.

Review the output of the HVite command very carefully.  Catching errors here will save a lot of headache later on.   Because seemingly minor problems at this step sometimes show up as major errors at later steps, and they are very difficult to trace back to here.  Here is the log output from the above noted command: hvite_log.  It is time well spent to review the log to make sure that HVite recognized all the words for each line in your prompts file. 

Next run HERest 2 more times:  

	HERest -A -D -T 1 -C config -I aligned.mlf -t 250.0 150.0 3000.0 -S train.scp -H hmm7/macros -H hmm7/hmmdefs -M hmm8 monophones1 

9. Prepare test data:
Compute the Feature vector of test data same as training data.
	1. Create Codetest.scp
	    HCopy -A -D -T 1 -C wav_config -S Codetest.scp
	2. Create test.scp : Contains path to .mfc of test file.

10. Recogniser Evaluation

	* Recognising the Test Data - monophones 
	HVite -A -D -T 1 -H hmm9/macros -H hmm9/hmmdefs -C config -S test.scp -l ’*’ -i recout.mlf -w wdnet -p 0.0 -s 5.0 dict monophones1

	* Recognising the Test Data - triphones
	HVite -A -D -T 1 -H hmm9/macros -H hmm9/hmmdefs -S test.scp -l ’*’ -i recout.mlf -w wdnet -p 0.0 -s 5.0 dict tiedlist

	To measure performance of the system.....
	create testref.mlf same as created word.mlf
		 perl prompts2mlf testref.mlf testprompt
	and run 
	HResults -I testref.mlf tiedlist recout.mlf  or   HResults -I testref.mlf monophones0 recout.mlf

error : Unable to traverse 72 states in 67 frames
 WARNING [-7324]  StepBack: File /home/pravin/htk/digit_project/note_identifiation/MFCC/r_06 - bad data or over pruning



11. Mixture Increment

Create a file called split.hed and copy and paste following

MU 2 {*.state[2-4].mix}

and run 

HHEd -A -D -T 1 -H hmm9/macros -H hmm9/hmmdefs -M hmm5 sil.hed monophones1 and then perform Recogniser Evaluation

This is for monophone.






